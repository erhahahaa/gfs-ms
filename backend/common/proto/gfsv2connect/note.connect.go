// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: note.proto

package gfsv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/erhahahaa/gfs-ms/common/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NoteServiceName is the fully-qualified name of the NoteService service.
	NoteServiceName = "gfs.v2.NoteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NoteServiceListNotesProcedure is the fully-qualified name of the NoteService's ListNotes RPC.
	NoteServiceListNotesProcedure = "/gfs.v2.NoteService/ListNotes"
	// NoteServiceCreateNoteProcedure is the fully-qualified name of the NoteService's CreateNote RPC.
	NoteServiceCreateNoteProcedure = "/gfs.v2.NoteService/CreateNote"
	// NoteServiceGetNoteProcedure is the fully-qualified name of the NoteService's GetNote RPC.
	NoteServiceGetNoteProcedure = "/gfs.v2.NoteService/GetNote"
	// NoteServiceUpdateNoteProcedure is the fully-qualified name of the NoteService's UpdateNote RPC.
	NoteServiceUpdateNoteProcedure = "/gfs.v2.NoteService/UpdateNote"
	// NoteServiceDeleteNoteProcedure is the fully-qualified name of the NoteService's DeleteNote RPC.
	NoteServiceDeleteNoteProcedure = "/gfs.v2.NoteService/DeleteNote"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	noteServiceServiceDescriptor          = proto.File_note_proto.Services().ByName("NoteService")
	noteServiceListNotesMethodDescriptor  = noteServiceServiceDescriptor.Methods().ByName("ListNotes")
	noteServiceCreateNoteMethodDescriptor = noteServiceServiceDescriptor.Methods().ByName("CreateNote")
	noteServiceGetNoteMethodDescriptor    = noteServiceServiceDescriptor.Methods().ByName("GetNote")
	noteServiceUpdateNoteMethodDescriptor = noteServiceServiceDescriptor.Methods().ByName("UpdateNote")
	noteServiceDeleteNoteMethodDescriptor = noteServiceServiceDescriptor.Methods().ByName("DeleteNote")
)

// NoteServiceClient is a client for the gfs.v2.NoteService service.
type NoteServiceClient interface {
	ListNotes(context.Context, *connect.Request[proto.ListNotesRequest]) (*connect.Response[proto.ListNotesResponse], error)
	CreateNote(context.Context, *connect.Request[proto.CreateNoteRequest]) (*connect.Response[proto.CreateNoteResponse], error)
	GetNote(context.Context, *connect.Request[proto.GetNoteRequest]) (*connect.Response[proto.GetNoteResponse], error)
	UpdateNote(context.Context, *connect.Request[proto.UpdateNoteRequest]) (*connect.Response[proto.UpdateNoteResponse], error)
	DeleteNote(context.Context, *connect.Request[proto.DeleteNoteRequest]) (*connect.Response[proto.DeleteNoteResponse], error)
}

// NewNoteServiceClient constructs a client for the gfs.v2.NoteService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNoteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NoteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &noteServiceClient{
		listNotes: connect.NewClient[proto.ListNotesRequest, proto.ListNotesResponse](
			httpClient,
			baseURL+NoteServiceListNotesProcedure,
			connect.WithSchema(noteServiceListNotesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNote: connect.NewClient[proto.CreateNoteRequest, proto.CreateNoteResponse](
			httpClient,
			baseURL+NoteServiceCreateNoteProcedure,
			connect.WithSchema(noteServiceCreateNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNote: connect.NewClient[proto.GetNoteRequest, proto.GetNoteResponse](
			httpClient,
			baseURL+NoteServiceGetNoteProcedure,
			connect.WithSchema(noteServiceGetNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNote: connect.NewClient[proto.UpdateNoteRequest, proto.UpdateNoteResponse](
			httpClient,
			baseURL+NoteServiceUpdateNoteProcedure,
			connect.WithSchema(noteServiceUpdateNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNote: connect.NewClient[proto.DeleteNoteRequest, proto.DeleteNoteResponse](
			httpClient,
			baseURL+NoteServiceDeleteNoteProcedure,
			connect.WithSchema(noteServiceDeleteNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// noteServiceClient implements NoteServiceClient.
type noteServiceClient struct {
	listNotes  *connect.Client[proto.ListNotesRequest, proto.ListNotesResponse]
	createNote *connect.Client[proto.CreateNoteRequest, proto.CreateNoteResponse]
	getNote    *connect.Client[proto.GetNoteRequest, proto.GetNoteResponse]
	updateNote *connect.Client[proto.UpdateNoteRequest, proto.UpdateNoteResponse]
	deleteNote *connect.Client[proto.DeleteNoteRequest, proto.DeleteNoteResponse]
}

// ListNotes calls gfs.v2.NoteService.ListNotes.
func (c *noteServiceClient) ListNotes(ctx context.Context, req *connect.Request[proto.ListNotesRequest]) (*connect.Response[proto.ListNotesResponse], error) {
	return c.listNotes.CallUnary(ctx, req)
}

// CreateNote calls gfs.v2.NoteService.CreateNote.
func (c *noteServiceClient) CreateNote(ctx context.Context, req *connect.Request[proto.CreateNoteRequest]) (*connect.Response[proto.CreateNoteResponse], error) {
	return c.createNote.CallUnary(ctx, req)
}

// GetNote calls gfs.v2.NoteService.GetNote.
func (c *noteServiceClient) GetNote(ctx context.Context, req *connect.Request[proto.GetNoteRequest]) (*connect.Response[proto.GetNoteResponse], error) {
	return c.getNote.CallUnary(ctx, req)
}

// UpdateNote calls gfs.v2.NoteService.UpdateNote.
func (c *noteServiceClient) UpdateNote(ctx context.Context, req *connect.Request[proto.UpdateNoteRequest]) (*connect.Response[proto.UpdateNoteResponse], error) {
	return c.updateNote.CallUnary(ctx, req)
}

// DeleteNote calls gfs.v2.NoteService.DeleteNote.
func (c *noteServiceClient) DeleteNote(ctx context.Context, req *connect.Request[proto.DeleteNoteRequest]) (*connect.Response[proto.DeleteNoteResponse], error) {
	return c.deleteNote.CallUnary(ctx, req)
}

// NoteServiceHandler is an implementation of the gfs.v2.NoteService service.
type NoteServiceHandler interface {
	ListNotes(context.Context, *connect.Request[proto.ListNotesRequest]) (*connect.Response[proto.ListNotesResponse], error)
	CreateNote(context.Context, *connect.Request[proto.CreateNoteRequest]) (*connect.Response[proto.CreateNoteResponse], error)
	GetNote(context.Context, *connect.Request[proto.GetNoteRequest]) (*connect.Response[proto.GetNoteResponse], error)
	UpdateNote(context.Context, *connect.Request[proto.UpdateNoteRequest]) (*connect.Response[proto.UpdateNoteResponse], error)
	DeleteNote(context.Context, *connect.Request[proto.DeleteNoteRequest]) (*connect.Response[proto.DeleteNoteResponse], error)
}

// NewNoteServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNoteServiceHandler(svc NoteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	noteServiceListNotesHandler := connect.NewUnaryHandler(
		NoteServiceListNotesProcedure,
		svc.ListNotes,
		connect.WithSchema(noteServiceListNotesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	noteServiceCreateNoteHandler := connect.NewUnaryHandler(
		NoteServiceCreateNoteProcedure,
		svc.CreateNote,
		connect.WithSchema(noteServiceCreateNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	noteServiceGetNoteHandler := connect.NewUnaryHandler(
		NoteServiceGetNoteProcedure,
		svc.GetNote,
		connect.WithSchema(noteServiceGetNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	noteServiceUpdateNoteHandler := connect.NewUnaryHandler(
		NoteServiceUpdateNoteProcedure,
		svc.UpdateNote,
		connect.WithSchema(noteServiceUpdateNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	noteServiceDeleteNoteHandler := connect.NewUnaryHandler(
		NoteServiceDeleteNoteProcedure,
		svc.DeleteNote,
		connect.WithSchema(noteServiceDeleteNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gfs.v2.NoteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NoteServiceListNotesProcedure:
			noteServiceListNotesHandler.ServeHTTP(w, r)
		case NoteServiceCreateNoteProcedure:
			noteServiceCreateNoteHandler.ServeHTTP(w, r)
		case NoteServiceGetNoteProcedure:
			noteServiceGetNoteHandler.ServeHTTP(w, r)
		case NoteServiceUpdateNoteProcedure:
			noteServiceUpdateNoteHandler.ServeHTTP(w, r)
		case NoteServiceDeleteNoteProcedure:
			noteServiceDeleteNoteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNoteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNoteServiceHandler struct{}

func (UnimplementedNoteServiceHandler) ListNotes(context.Context, *connect.Request[proto.ListNotesRequest]) (*connect.Response[proto.ListNotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gfs.v2.NoteService.ListNotes is not implemented"))
}

func (UnimplementedNoteServiceHandler) CreateNote(context.Context, *connect.Request[proto.CreateNoteRequest]) (*connect.Response[proto.CreateNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gfs.v2.NoteService.CreateNote is not implemented"))
}

func (UnimplementedNoteServiceHandler) GetNote(context.Context, *connect.Request[proto.GetNoteRequest]) (*connect.Response[proto.GetNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gfs.v2.NoteService.GetNote is not implemented"))
}

func (UnimplementedNoteServiceHandler) UpdateNote(context.Context, *connect.Request[proto.UpdateNoteRequest]) (*connect.Response[proto.UpdateNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gfs.v2.NoteService.UpdateNote is not implemented"))
}

func (UnimplementedNoteServiceHandler) DeleteNote(context.Context, *connect.Request[proto.DeleteNoteRequest]) (*connect.Response[proto.DeleteNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gfs.v2.NoteService.DeleteNote is not implemented"))
}
